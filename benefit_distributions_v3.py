# -*- coding: utf-8 -*-
"""Benefit_Distributions_v3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j5iMkHUN0dWuLOajAmmWSFHeTn_UEJ3q
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture --no-display
# %pip install plotly == 5.8.0
# %pip install --upgrade kneed                                       #
# import base64
# import kneed as kd                                                 #
# import io
# import ipywidgets as widgets
# from   ipywidgets import GridspecLayout
# from   IPython.display import display, clear_output
# import math
# import matplotlib as mpl
# import matplotlib.pyplot as plt
# import numpy as np
# import os                                                          #
# import pandas as pd
# import plotly.graph_objects as go
# from   plotly.subplots import make_subplots                        #
# from   sklearn.cluster import KMeans                               #
# from   sklearn.metrics import silhouette_samples, silhouette_score #
# from   sklearn.preprocessing import MinMaxScaler, StandardScaler   #
# import sys
# import time
# import tensorflow as tf                                            #
# import warnings                                                    #
# #For the Plots
# from google.colab import output
# output.enable_custom_widget_manager()
# #Importing Files from Google Drive---------------------------------
# from pydrive.auth import GoogleAuth
# from pydrive.drive import GoogleDrive
# from google.colab import auth
# from oauth2client.client import GoogleCredentials
# #Authenticate and create the PyDrive client.
# auth.authenticate_user()
# gauth = GoogleAuth()
# gauth.credentials = GoogleCredentials.get_application_default()
# drive = GoogleDrive(gauth)
# #Access the content of the Drive (The Files illustrated in the Left)
# from google.colab import drive
# drive.mount('/content/drive') #, force_remount=True)
# sys.path.append('/content/drive/MyDrive/Python/Demonstrador/ScriptsAfter16June12')
# 
# #Importing SRIPTS------------------------------------------------------------------
# ###  PrepareIputs Script
# import PrepareInputs_Script as PIS

"""#Read and Prepare Data"""

#INPUT FOR AGGREGATED/SR Model
with open('/content/drive/MyDrive/Python/Demonstrador/Demos_TESE/Excel_Tese/INPUT_ISGTeu23_Clustering_AG_SR_130620.xlsx', 'rb') as data:
    Hist_Part              = pd.read_excel(data,sheet_name ='Historic_Qty.Participation')
    Hist_Flex              = pd.read_excel(data,sheet_name ='Historic_Flexibility')
    Hist_Requ              = pd.read_excel(data,sheet_name ='Historic_Qty.Request',skiprows=1)
    Data_total_Cons        = pd.read_excel(data,sheet_name ='Forecasted_Cons')
    Data_total_Flex        = pd.read_excel(data,sheet_name ='Forecasted_Flex',nrows=1, usecols=lambda x: 'Unnamed' not in x)#Ignore the first Column
    Data_total_R           = pd.read_excel(data,sheet_name ='Flex_Redu_Forecasted')
    Data_total_S           = pd.read_excel(data,sheet_name ='Flex_Shif_Forecasted')
    Hours_Shift            = pd.read_excel(data,sheet_name ='Shift_Hours')
    kWh_Shift              = pd.read_excel(data,sheet_name ='Shift_kWh')
    DF_Mode                = pd.read_excel(data,sheet_name ='Mode')
    CountMonth             = pd.read_excel(data,sheet_name ='Count_Month')

#INPUT FOR DD (Device by Device)
with open('/content/drive/MyDrive/Python/Demonstrador/Demos_TESE/Excel_Tese/INPUT_ISGTeu23_Clustering_EpE_130620_V2.xlsx', 'rb') as data:
    Data_total_Cons_DD     = pd.read_excel(data,sheet_name ='Devices_Cons_1h_Forecast_Values')
    Data_total_Flex_DD     = pd.read_excel(data,sheet_name ='Devices_Flex_1h_Forecast_Values')
    Hist_Part_DD           = pd.read_excel(data,sheet_name ='Historic_Qty.Participation')
    Hist_Flex_DD           = pd.read_excel(data,sheet_name ='Historic_Flexibility')
    Hist_Requ_DD           = pd.read_excel(data,sheet_name ='Historic_Qty.Request')
    Hours_Shift_DD         = pd.read_excel(data,sheet_name ='Shift_Hours')
    kWh_Shift_DD           = pd.read_excel(data,sheet_name ='Shift_kWh')
    DF_Group               = pd.read_excel(data,sheet_name ='Group')
    CountMonth_DD          = pd.read_excel(data,sheet_name ='Count_Month')
    RealFlex               = pd.read_excel(data,sheet_name ='Real_Flex')

##################################################### PARAMETERS #####################################################
  #Generation Surplus (GS)  Dataframe 2 Columns [Hour, Energy (kWh)]
GS=pd.DataFrame([[2.6],[29.4],[0.8]], columns=[0], index=[12,13,14])
  #Energy value (kWh) to reduce during the DR Event
To_Reduce=5.145
  #Revenue obtained throuh the E DR events during Month g
Revenue = 50.0  # Test purposes (Later replace/erase)

##################################################### PREPARE THE DATA #####################################################
  ### DATA RELATED TO AGGREGATEDD/(SHIFTING OR REDUCING) MODEL------------------------------------------------------------------------------------
DF_SR = PIS.PrepareData_SR(Data_total_Cons,Data_total_Flex,Data_total_R,Data_total_S,Hist_Part,Hist_Flex,Hist_Requ,Hours_Shift,kWh_Shift,DF_Mode)
  ### DATA RELATED TO EQUIPMENT BY EQUIPMENT MODEL------------------------------------------------------------------------------------------------
DF_DD = PIS.PrepareData_AbA(Data_total_Cons_DD,Data_total_Flex_DD,Hist_Part_DD,Hist_Flex_DD,Hist_Requ_DD,Hours_Shift_DD,kWh_Shift_DD,DF_Group)
  ### Input for the Ranking algorithm
DF,DF_Flex=PIS.OrCa_v2(DF_SR,DF_DD, RealFlex)

DF.head(10)

"""#Benefits/Remuneration Distribution"""

def Benefits_Distribution(Revenue,DF):
  #Datafrme with the Members' Contribution
  DF_BenDist=pd.DataFrame(0.0,columns=["Cont_Used_Flex","Cont_Effort","Penalization_P","Penalization_F","Penalizations","Contribution","Benefits"], index=DF.index)

  for i in DF_BenDist.index:
      ###Calculate the Member's Contributions ------------------------------------------------------------------------------------------------------------
        #Effort Rate
      DF_BenDist["Cont_Effort"][i]     = ((DF["Effort_Rate"])[i]/sum(DF["Effort_Rate"]))
        #Used Flexibility
      DF_BenDist["Cont_Used_Flex"][i]  = (DF["T_Flexibility"][i]/sum(DF["T_Flexibility"])) #Change to "Used_Flexibility" after creating the dataset
        #Total
      DF_BenDist["Contribution"][i]    = 1/2*(DF_BenDist["Cont_Used_Flex"] + DF_BenDist["Cont_Effort"])[i]

      if(DF_BenDist["Contribution"][i] < 0):
      #     print(f"Contribution of the Member {i} is < 0")
          DF_BenDist["Contribution"][i] = 0
      # if(DF_BenDist["Contribution"][i] > 1):
      #     print(f"Contribution of the Member {i} is > 1")

      ###Calculate the Member's Penalization ------------------------------------------------------------------------------------------------------------
      DF_BenDist["Penalization_P"][i]  = ((DF['Participation(%)'])[i]/max(DF['Participation(%)']))
      DF_BenDist["Penalization_F"][i]  = (1 - abs((DF["T_Flexibility"][i] - DF_Flex[i].mean())/DF_Flex[i].mean()))       #((DF['T_Flexibility'])[i]/max(DF['T_Flexibility']))
      DF_BenDist["Penalizations"][i]   = 1/2*(DF_BenDist["Penalization_P"] + DF_BenDist["Penalization_F"])[i]

      ###Calculate the Members' Benefits ------------------------------------------------------------------------------------------------------------
      DF_BenDist["Benefits"][i] = round( Revenue*(DF_BenDist["Contribution"][i])*(DF_BenDist["Penalizations"][i]),2)

  # print(f"Contributions'  Sum: {round(sum(DF_BenDist['Contribution']), 3)};   Max: {round(max(DF_BenDist['Contribution']), 3)};   Min: {round(min(DF_BenDist['Contribution']), 3)}\
   #           \n     Benefits'  Sum: {round(sum(DF_BenDist['Benefits']),     3)};   Max: {round(max(DF_BenDist['Benefits']),     3)};   Min: {round(min(DF_BenDist['Benefits']),     3)}\
   #           \nPenalization_P' Sum: {round(sum(DF_BenDist['Penalization_P']), 3)}; Max: {round(max(DF_BenDist['Penalization_P']), 3)}; Min: {round(min(DF_BenDist['Penalization_P']), 3)}\
   #           \nPenalization_F' Sum: {round(sum(DF_BenDist['Penalization_F']), 3)}; Max: {round(max(DF_BenDist['Penalization_F']), 3)}; Min: {round(min(DF_BenDist['Penalization_F']), 3)}\
   #           \nPenalizations'  Sum: {round(sum(DF_BenDist['Penalizations']), 3)};  Max: {round(max(DF_BenDist['Penalizations']), 3)};  Min: {round(min(DF_BenDist['Penalizations']), 3)}\
   #           \nProsumers' Total Benerfits:  {round(sum(DF_BenDist['Benefits'][:11]), 3)}; Consumers' Total Benerfits: {round(sum(DF_BenDist['Benefits'][11:]), 3)}")

  return DF_BenDist.sort_values("Contribution", ascending=False)

DF_BenDist = Benefits_Distribution(Revenue, DF)
print(DF_BenDist.Benefits.sum())
DF_BenDist.head(15)

Fig = DF_BenDist.drop(["Penalization_P","Penalization_F"],axis=1).sort_values("Contribution", ascending=False).head(20)
Fig_1 = Fig.head(15).style.set_properties(subset=Fig.columns, **{'width': '10px','text-align': 'center'}).format(na_rep='-', precision=2)
Fig_1.set_table_styles([dict(selector = 'th', props=[('text-align', 'center')])])